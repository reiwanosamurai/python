##Pythonによる回帰分析

# children.csvを読み込む
import pandas as pd
children = pd.read_csv("./children.csv")
children

# 散布図を作成する
import matplotlib.pyplot as plt

plt.xlim(0, 5) # x軸の表示範囲
plt.ylim(70, 110) # y軸の表示範囲
plt.xlabel("Age", fontsize=20) # x軸ラベル
plt.ylabel("Height", fontsize=20) # y軸ラベル
plt.grid(True) # 目盛線の表示
plt.tick_params(labelsize = 12) # 目盛線のラベルサイズ
# グラフの描画
plt.scatter(children["Age"], children["Height"], s=100, c="k", marker="o", alpha=1) 
#(3)散布図の描画
plt.show()

#年齢と身長の平均を求める
import numpy as np
xm,ym = np.mean(children)
print ("年齢の平均:",round(xm,3)) #round関数で小数点３桁で切り捨て
print ("身長の平均:",ym)


#年齢と身長の不偏標準偏差を求める
xsd,ysd = np.std(children, ddof=1)
print ("年齢の標準偏差:",round(xsd,3)) #round関数で小数点３桁で切り捨て
print ("身長の標準偏差:",round(ysd,3)) #round関数で小数点３桁で切り捨て


#年齢と身長の標準偏差を求める
xsd,ysd = np.std(children)
print ("年齢の標準偏差:",round(xsd,3)) #round関数で小数点３桁で切り捨て
print ("身長の標準偏差:",round(ysd,3)) #round関数で小数点３桁で切り捨て


#年齢と身長の共分散を求める
#データ個数分だけ (x-x平均)x(y-y平均)を繰り返す
sum=0
for i in range(0,len(children)):
  sum += ((children["年齢"][i]-xm)*(children["身長"][i]-ym))
  print(i,"年齢",children["年齢"][i],"身長",children["身長"][i],"身長×年齢",np.round(sum,3))
#データ個数で割った値を返す
cov_a = sum/len(children)
print ("共分散:",np.round(cov_a,3))


#年齢と身長の相関係数を求める
#相関係数 = (共分散)/(身長の標準偏差x年齢の標準偏差)
print ("相関係数:",cov_a/(xsd*ysd))


#最小二乗法による傾きa と　切片bを求める
#分散を求める
xvar,yvar = np.var(children)
#傾きa = 共分散/分散
a = cov_a/xvar
#切片 b= y平均 - a x x平均
b = ym - a * xm
#傾き、切片を表示
print ("傾きa",a, "切片b",b)


#入力：テストデータの年齢、出力：身長
for i in range(0,len(children)):
#最小二乗法で求めた傾きa、切片bをもとに予測値testを求める
  test= ((children["年齢"][i]*a)+b)
#年齢（実測値）　身長（実測値）　身長（予測値）　身長の残差を表示
  print(i,"年齢:",children["年齢"][i],"身長(実測値):",children["身長"][i],"身長(予測値):",round(test,2)
       ,"残差:",children["身長"][i]-round(test,2))


#決定係数をもとめる
#残差平方和,回帰平方和、全体平方和を求める
z_sum=0
k_sum=0
t_sum=0
for i in range(0,len(children)):
    #残差平方和 y(実測値) - 予測値)^2
    z_sum += (children["身長"][i]-(children["年齢"][i]*a+b))**2
    #回帰平方和 予測値 - 平均
    k_sum+= ((children["年齢"][i]*a+b)-ym)**2
    #全体平方和 y(実測値) - 平均
    t_sum+= ((children["身長"][i])-ym)**2
#決定係数を求めて、表示
print ("決定係数 回帰平方和/全体平方和", np.round(k_sum/t_sum,3))
print ("決定係数 1-残差平方和/全体平方和",1 - round(z_sum/t_sum,3))

